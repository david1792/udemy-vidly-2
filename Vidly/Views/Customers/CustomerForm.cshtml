@model Vidly.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "New";
}

<h2>New</h2>

@using (Html.BeginForm("Save", "Customers"))
{
    <div class="form-group">
                      @*'c' as a model goes to 'c' dot 'name'*@
        @Html.LabelFor(c => c.Customer.Name)
        @Html.TextBoxFor(c => c.Customer.Name, new {@class = "form-control"})@*i can pass an annonimous object and any properties we add to thi sobject will be rendered as an html attributes, if intellisense detect error maybe we use a reserver keyword like class, so we fix this add @*@
        @Html.ValidationMessageFor(c => c.Customer.Name)
    </div> 
    <div class="form-group">
        @Html.LabelFor(c => c.Customer.BirthDate)<br/>
        <label for="BirthDate">Date of birth 2dn alterantive</label>
        @Html.TextBoxFor(c => c.Customer.BirthDate, "{0:d MMM yyyy}", new { @class = "form-control" })@*i can pass an annonimous object and any properties we add to thi sobject will be rendered as an html attributes, if intellisense detect error maybe we use a reserver keyword like class, so we fix this add @*@
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.Customer.MembershipTypeId)
        @Html.DropDownListFor(c => c.Customer.MembershipTypeId, new SelectList(Model.MembershipTypes, "Id", "Name"), "Select one prro", new { @class = "form-control" })
        @Html.ValidationMessageFor(c => c.Customer.MembershipTypeId)
        @*Membershipid has validation because is byte datatype and implicity is non nullable field, if we explore
         the dropdown,  "Select one prro" has no value and mvc framework send us and error modelstate*@
    </div>
    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(c => c.Customer.isSuscribedToNewsletter) subcribe to newsletter@*i can pass an annonimous object and any properties we add to thi sobject will be rendered as an html attributes, if intellisense detect error maybe we use a reserver keyword like class, so we fix this add @*@

        </label>
    </div>
    @*In this case we don't sent to the controller the id of the customer, to solve this, we add a new hidden input for the id
        By convention this hidden id after of submit button
        *@
    @Html.HiddenFor(c => c.Customer.Id)
    <button type="submit" class="btn bg-primary">Save</button>
} 
