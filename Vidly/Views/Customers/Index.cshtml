@model IEnumerable<Vidly.Models.Customer>
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@
@{
    ViewBag.Title = "Index";
}
@section styles{
    @Styles.Render("~/Content/datatables")

}
<h2>Index</h2>


@if (!@Model.Any())
{
    @*Any method is for list, == null for single object*@
    <h2>forbiden prro</h2>
}
else
{
    <table id="customers" class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Discount description</th>
                <th>options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in Model)
            {
                <tr>
                    <td>@i.Id</td>
                    <td>@i.Name</td>
                    <td>@i.MembershipType.MembershipDescription</td>
                    <td>
                        @Html.ActionLink("Details", "Edit", "Customers", new { id = i.Id }, null)
                        <button data-customer-id="@i.Id" class="btn-link js-delete"> delete?</button>
                    </td>@*Si no ponemos el 4to argumento en null no se renderiza bien la url en el enlace*@
                </tr>
            }
        </tbody>
    </table>
}
@section scripts
{
    @Scripts.Render("~/bundles/datatables");
    <script>
        /*standard jquery document dot ready to reference our delete button*/
        $(document).ready(function () {
            $("#customers").dataTable();
            /* the way by handling the click event is inneficiet because i f we have a 10 customers, each of them have a delete button,
             and for each button w have a separate a handler function in memory, so if we change the sselector for only the table and add a secound argument whitch  is the filter
             no many how many customers render, we have a one event handler for all delete buttons
             only click event works with element with class js-delete*/
            $('#customers').on('click', '.js-delete', function () {
                var button = $(this);
                /*bootbox doesn't return a boolean, instead takes a callback function*/
                bootbox.confirm("delete this prro?", function (result) {
                    if (result) {
                        $.ajax(
                            {
                                url: "/api/customers/" + button.attr("data-customer-id"),
                                method: "DELETE",
                                success: function () {
                                    button.parents("tr").remove();
                                }
                            });
                    }
                });
            });
        });

    </script>
}
